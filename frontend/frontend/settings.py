"""
Django settings for frontend project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import logging

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%rpw4w2+0j&y1sv!jy^02t**se1z%tkg9ygkyxe4i5+j!fq@iz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['174.114.90.89', 'localhost', '192.168.1.63']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'background_task',
    'corsheaders',
    'channels',



    'crowdeye'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    'corsheaders.middleware.CorsMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'frontend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'frontend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    } if not os.environ.get("1", False) else "redis"
}
if not os.environ.get("1", False):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        } if not os.environ.get("1", False) else "redis"
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'postgres',
            'USER': 'postgres',
            'PASSWORD': 'postgres',
            'HOST': 'postgres',
            'PORT': '',

        }
    }



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR + "/static",
    '/var/www/static/',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]


ASGI_APPLICATION = "frontend.routing.application"
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('localhost' if not os.environ.get("1", False) else "redis", 6379)],
        },
    },
}


# This logging system is based off one from the django documentation: https://docs.djangoproject.com/en/3.1/topics/logging/

LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "standard": {
#             "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s",
#             "datefmt": "%Y-%m-%d %H:%M:%S"
#         },
#         "verbose": {
#             "format": "%(asctime)s [%(levelname)s] %(name)s %(filename)s/%(funcName)s(%(lineno)d) : %(message)s"
#         }
#     },
#     "handlers": {
#         "default": {
#             "level": "DEBUG",
#             "formatter": "standard",
#             "class": "logging.StreamHandler"
#         },
#         "file": {
#             "level": "DEBUG",
#             "formatter": "verbose",
#             "filename": "logs/django-log.log",

#             "class": "logging.handlers.RotatingFileHandler",
#             "backupCount": 10, 
#             "maxBytes": 5242880
#         }

#     },
#     "loggers": {
#         "": {
#             "handlers": [
#                 "default",
#                 "file"
#             ],
#             "level": "DEBUG"
#         }
#     }
# }
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'file_log_large': { # A large file logger to be used generaly
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple', # The info message shouldn't have errors so its fine to be simple
            'filename' : 'logs/info_log.log',
            'maxBytes' : 1024*1024*100 # 100MB
        },
        'file_log_info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'simple', # The info message shouldn't have errors so its fine to be simple
            'filename' : 'logs/info_log.log',
            'maxBytes' : 1024*1024*5 # 5MB
        },
        'file_log_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose', # The error messages are important to understand and should therefore have metadata
            'filename' : 'logs/error_log.log',
            'maxBytes' : 1024*1024*5 # 5MB
        },
        'file_log_debug': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose', # The debug messages are important to understand and should therefore have metadata
            'filename' : 'logs/debug_log.log',
            'maxBytes' : 1024*1024*5 # 5MB
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
        },
        'crowdeye': {
            'handlers': ['file_log_large', 'console'],
            'level': 'DEBUG',
            'propagate' : True
        },
        'crowdeye.influx': {
            'handlers': ['file_log_debug', 'file_log_error', 'file_log_info', 'console'],
            'level': 'DEBUG',
            'formatters': ['simple', 'verbose'],
            'propagate' : False
        },
        'crowdeye.management.commands.startserver': {
            'handlers': ['file_log_debug', 'file_log_error', 'file_log_info'],
            'level': 'DEBUG',
            'formatters': ['simple', 'verbose'],
            'propagate' : True
        },
    }
}